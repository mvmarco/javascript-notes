{"version":3,"sources":["shopping.js"],"names":["shoppingForm","document","querySelector","list","items","handleSubmit","e","preventDefault","console","log","currentTarget","item","value","name","id","Date","now","complete","push","length","target","reset","dispatchEvent","CustomEvent","displayItems","html","map","join","innerHTML","mirrorToLocalStorage","info","localStorage","setItem","JSON","stringify","restoreFromLocalStorage","lsItems","parse","getItem","deleteItem","filter","markAsComplete","itemRef","find","addEventListener","parseInt","matches"],"mappings":"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","file":"shopping.3c459b95.js","sourceRoot":"..","sourcesContent":["/* \n  first thing is to listen to everytime the user type into the input (add item)\n  add hit the submit button. if you dont add an event listener whatever the user\n  put goes to the url but does not go anywhere\n\n  second we gotta keep track of all the items, whether or not they are complete\n  on the screen\n\n  thrird we gotta render/give out a list of those items\n*/\n\nconst shoppingForm = document.querySelector('.shopping');\nconst list = document.querySelector('.list');\n\n// We need an array to hold our state (all the items)\n/* \n  state means in JS when you have state, state is a bunch of data that reflects\n  the status of your application. State contains the list of all the items you got\n  the IDs of that items or whether or not they have been completed (sold, expensive\n  etc etc)\n*/\nlet items = [];\n\n// first step\nfunction handleSubmit(e) {\n  e.preventDefault(); // stop the submission\n  console.log('submitted!!');\n  console.log('check here', e.currentTarget);\n  console.log('check here', e.currentTarget.item.value);\n  // get the data from what the user type¨\n  // you gotta do .item.value because item is the name of the input\n  // you can use whatever is inside the input to get the value\n  // and we need to get the value of the input which is what the user types\n  // not just the current target which is the form itself, you cannot store that info as data\n  const name = e.currentTarget.item.value;\n  // if its empty, then dont submit it\n  if (!name) return;\n  /* \n    now we gotta store the user input as data in the array items\n    but we cannot just store straight strings but more information¨\n    like the ID, is it completed? if it is bought or not and the \n    actual name\n  */\n  const item = {\n    name, // equale to name: name, it has been refactored\n    id: Date.now(), // something unique, that is the trick as long as you dont add items in milliseconds\n    // that could be a problem for databases if you save them fast\n    complete: false, // by default are not completed or bought\n  };\n  // Push the items into our state\n  items.push(item);\n  console.log(`There are now ${items.length} in your state`);\n  // Clear the form, it cleans the target of the form so the user does not have to cancel\n  // all the time the word that he puts\n  // the below code is the same as e.currentTarget.item.value = '';\n  e.target.reset();\n  // fire off a custom event that will tell anyone else who cares that the items have been updated!\n  list.dispatchEvent(new CustomEvent('itemsUpdated'));\n}\n\nfunction displayItems() {\n  console.log(items);\n\n  /* \n    in otder to display the items, you call the items and create\n    a new array with .map where for each name you put it inside a\n    list:\n\n    names = ['marco', 'olivia']\n    names.map(name => `<li> ${name} </li>`)\n    // here you get something like [\"<li> marco </li>\", \"<li> olivia </li>\"];\n    so you can just call join and select the individual list names\n    all together would be: names.map(name => `<li> ${name} </li>`).join(\"\");\n    <li> marco </li>\n    <li> olivia </li>\n  */\n\n  // the class shopping item just put some style to the items on the list\n  const html = items\n    .map(\n      (item) => `<li class=\"shopping-item\"> \n      <input\n        value=\"${item.id}\"\n        type=\"checkbox\"\n        ${item.complete && 'checked'}\n      >\n      <span class=\"itemName\">${item.name}</span>\n\n      <button\n        aria-label=\"Remove ${item.name}\"\n        value=\"${item.id}\">\n        &times;\n      </button aria-label=\"Remove>\n  </li>`\n    )\n    .join('');\n  list.innerHTML = html; // const list = document.querySelector('.list');\n}\n\nfunction mirrorToLocalStorage() {\n  console.info('Saving items to localstorage');\n  localStorage.setItem('items', JSON.stringify(items));\n}\n\nfunction restoreFromLocalStorage() {\n  console.info('Restoring from LS');\n  // pull the items from LS\n  const lsItems = JSON.parse(localStorage.getItem('items'));\n  if (lsItems.length) {\n    // items = lsItems;\n    // lsItems.forEach(item => items.push(item));\n    // items.push(lsItems[0], lsItems[1]);\n    items.push(...lsItems);\n    list.dispatchEvent(new CustomEvent('itemsUpdated'));\n  }\n}\n\nfunction deleteItem(id) {\n  console.log('DELETIENG ITEM', id);\n  // update our items array without this one\n  items = items.filter((item) => item.id !== id);\n  console.log(items);\n  list.dispatchEvent(new CustomEvent('itemsUpdated'));\n}\n\nfunction markAsComplete(id) {\n  console.log('Marking as complete', id);\n  const itemRef = items.find((item) => item.id === id);\n  itemRef.complete = !itemRef.complete;\n  list.dispatchEvent(new CustomEvent('itemsUpdated'));\n}\n// ######################\n// first step\n// ######################\nshoppingForm.addEventListener('submit', handleSubmit);\n// ######################\n// first step\n// ######################\nlist.addEventListener('itemsUpdated', displayItems);\nlist.addEventListener('itemsUpdated', mirrorToLocalStorage);\n// Event Delegation: We listen or the click on the list <ul> but then delegate the click over to the button if that is what was clicked\nlist.addEventListener('click', function (e) {\n  const id = parseInt(e.target.value);\n  if (e.target.matches('button')) {\n    deleteItem(id);\n  }\n  if (e.target.matches('input[type=\"checkbox\"]')) {\n    markAsComplete(id);\n  }\n});\nrestoreFromLocalStorage();\n"]}